name: Deployment to Orange Pi server

on:
  push:
    branches:
      - "main"
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    concurrency:
      group: "deployment"
      cancel-in-progress: false

    steps:
      - name: Check out the repository code
        uses: actions/checkout@v3

      - name: Set up SSH
        run: |
          set -e
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -p ${{ secrets.ORANGE_PI_PORT }} -H ${{ secrets.ORANGE_PI_IP }} >> ~/.ssh/known_hosts

      - name: Archive and upload code to server
        run: |
          set -e
          set -x
          if [ ! -d "$GITHUB_WORKSPACE" ]; then
            echo "Error: Working directory does not exist or is inaccessible: $GITHUB_WORKSPACE"
            exit 1
          fi
          echo "Contents of $GITHUB_WORKSPACE:"
          ls -al "$GITHUB_WORKSPACE"
          chmod -R u+rw "$GITHUB_WORKSPACE"
          cp -R "$GITHUB_WORKSPACE" /tmp/workdir
          tar --warning=no-file-changed --warning=no-file-removed --ignore-failed-read -czf app.tar.gz \
            --exclude=.git \
            --exclude=.github \
            --exclude=*.log \
            --exclude=*.tmp \
            --exclude=node_modules \
            --exclude=frontend/node_modules \
            --exclude=frontend/dist \
            --exclude=backend/node_modules \
            --exclude=.idea \
            -C /tmp/workdir .
          if [ ! -f app.tar.gz ]; then
            echo "Error: Archive file was not created. Exiting."
            exit 1
          fi
          scp -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no -P ${{ secrets.ORANGE_PI_PORT }} \
            app.tar.gz \
            ${{ secrets.ORANGE_PI_USER }}@${{ secrets.ORANGE_PI_IP }}:/tmp/app.tar.gz

      - name: Deploy in Docker on remote server
        run: |
          set -e
          set -x
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no -p ${{ secrets.ORANGE_PI_PORT }} \
            ${{ secrets.ORANGE_PI_USER }}@${{ secrets.ORANGE_PI_IP }} << 'EOF'
            set -e
            rm -rf ~/fhir-app && mkdir -p ~/fhir-app
            tar xzf /tmp/app.tar.gz -C ~/fhir-app
            cd ~/fhir-app
            docker stop node_app || true
            docker rm node_app || true
            docker stop fhir_app || true
            docker rm fhir_app || true
            if [ -f docker-compose.yml ]; then
              docker-compose down || true
              docker-compose up -d --build
            else
              docker build -t fhir-app:latest .
              docker run -d --name fhir_app \
                -p 80:3000 \
                -e NODE_ENV=production \
                -e EXTERNAL_FHIR_URL='https://server.fire.ly/r4' \
                --restart unless-stopped \
                fhir-app:latest
            fi
            docker ps | grep fhir
          EOF
