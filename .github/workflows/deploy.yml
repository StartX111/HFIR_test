name: Build and Deploy to Orange Pi

on:
  push:
    branches:
      - "main"
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    concurrency:
      group: "deployment"
      cancel-in-progress: false
    
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      # –°–±–æ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
      - name: Build Frontend
        run: |
          cd frontend
          npm ci
          npm run build
      
      # –°–±–æ—Ä–∫–∞ –±—ç–∫–µ–Ω–¥–∞ - —Ç–æ–ª—å–∫–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
      - name: Prepare Backend
        run: |
          cd backend
          npm ci --omit=dev
      
      # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–µ–ø–ª–æ—è
      - name: Prepare deployment directory
        run: |
          mkdir -p deploy
          cp -r backend/* deploy/
          mkdir -p deploy/frontend/dist
          cp -r frontend/dist/* deploy/frontend/dist/
      
      # –°–æ–±–∏—Ä–∞–µ–º Docker –æ–±—Ä–∞–∑
      - name: Build Docker image
        run: |
          cat > Dockerfile.deploy << 'EOF'
          FROM node:20-alpine
          WORKDIR /app
          COPY . /app/
          EXPOSE 3000
          ENV NODE_ENV=production
          ENV EXTERNAL_FHIR_URL='https://server.fire.ly/r4'
          CMD ["node", "server.js"]
          EOF
          
          docker build -t fhir-app:latest -f Dockerfile.deploy deploy
          
          # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–∑ –≤ —Ñ–∞–π–ª
          docker save fhir-app:latest > fhir-app-image.tar
      
      # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSH –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Orange Pi
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -p ${{ secrets.ORANGE_PI_PORT }} -H ${{ secrets.ORANGE_PI_IP }} >> ~/.ssh/known_hosts
      
      # –û—Ç–ø—Ä–∞–≤–∫–∞ Docker –æ–±—Ä–∞–∑–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      - name: Upload Docker image
        run: |
          echo "Uploading Docker image to server (this may take some time)..."
          scp -i ~/.ssh/id_ed25519 -P ${{ secrets.ORANGE_PI_PORT }} \
            fhir-app-image.tar \
            ${{ secrets.ORANGE_PI_USER }}@${{ secrets.ORANGE_PI_IP }}:/tmp/fhir-app-image.tar
          echo "Upload completed."
      
      # –î–µ–ø–ª–æ–π Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      - name: Deploy Docker container
        run: |
          ssh -i ~/.ssh/id_ed25519 -p ${{ secrets.ORANGE_PI_PORT }} \
            ${{ secrets.ORANGE_PI_USER }}@${{ secrets.ORANGE_PI_IP }} << 'EOF'
            set -e
            set -x
            
            echo "Loading Docker image from file..."
            docker load < /tmp/fhir-app-image.tar
            
            echo "Stopping and removing old container if exists..."
            docker stop fhir_app || true
            docker rm fhir_app || true
            
            echo "Starting new container..."
            docker run -d --name fhir_app \
              -p 80:3000 \
              -e NODE_ENV=production \
              -e EXTERNAL_FHIR_URL='https://server.fire.ly/r4' \
              --restart unless-stopped \
              fhir-app:latest
            
            echo "Cleaning up..."
            rm -f /tmp/fhir-app-image.tar
            
            echo "Container status:"
            docker ps | grep fhir
            
            echo "Container logs:"
            docker logs fhir_app --tail 20
          EOF
      
      # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      - name: Check application availability
        run: |
          ssh -i ~/.ssh/id_ed25519 -p ${{ secrets.ORANGE_PI_PORT }} \
            ${{ secrets.ORANGE_PI_USER }}@${{ secrets.ORANGE_PI_IP }} << 'EOF'
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç 80
            if netstat -tuln | grep -q ":80 "; then
              echo "Application is listening on port 80"
            else
              echo "Warning: Application does not seem to be listening on port 80"
              docker logs fhir_app --tail 100
              exit 1
            fi
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ HTTP –∑–∞–ø—Ä–æ—Å—ã (—Å —Ç–∞–π–º–∞—É—Ç–æ–º)
            timeout 10 curl -s http://localhost:80/ > /dev/null
            if [ $? -eq 0 ]; then
              echo "Application responds to HTTP requests"
            else
              echo "Warning: Application does not respond to HTTP requests"
              docker logs fhir_app --tail 100
              exit 1
            fi
          EOF
      
      # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–µ–ø–ª–æ–µ
      - name: Deployment success notification
        if: success()
        run: echo "üöÄ Application successfully deployed to Orange Pi!"
      
      # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ—É–¥–∞—á–Ω–æ–º –¥–µ–ø–ª–æ–µ
      - name: Deployment failure notification
        if: failure()
        run: |
          echo "‚ùå Deployment failed!"
          ssh -i ~/.ssh/id_ed25519 -p ${{ secrets.ORANGE_PI_PORT }} \
            ${{ secrets.ORANGE_PI_USER }}@${{ secrets.ORANGE_PI_IP }} \
            "docker logs fhir_app --tail 100 || true"
