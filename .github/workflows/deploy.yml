name: Deployment to Orange Pi server

on:
  push:
    branches:
      - "main"
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    concurrency:
      group: "deployment"
      cancel-in-progress: false

    steps:
      - name: Check out the repository code
        uses: actions/checkout@v3

      - name: Set up SSH
        run: |
          set -e
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -p ${{ secrets.ORANGE_PI_PORT }} -H ${{ secrets.ORANGE_PI_IP }} >> ~/.ssh/known_hosts

      - name: Archive and upload code to server
        run: |
          set -e
          set -x
          # Добавляем метку времени в архив для принудительного обновления
          TIMESTAMP=$(date +%s)
          echo "Build timestamp: $TIMESTAMP" > timestamp.txt
          
          if [ ! -d "$GITHUB_WORKSPACE" ]; then
            echo "Error: Working directory does not exist or is inaccessible: $GITHUB_WORKSPACE"
            exit 1
          fi
          echo "Contents of $GITHUB_WORKSPACE:"
          ls -la "$GITHUB_WORKSPACE"
          
          # Проверяем структуру каталогов
          if [ -d "backend" ]; then
            echo "Backend directory exists in repository"
            ls -la backend
          else
            echo "WARNING: Backend directory missing in repository"
            mkdir -p backend/src
            # Минимальный пакет для backend если его нет
            echo '{"name":"fhir-app-backend","version":"1.0.0","main":"server.js","scripts":{"start":"node server.js"},"dependencies":{"express":"^5.1.0","cors":"^2.8.5","undici":"^7.8.0"}}' > backend/package.json
            
            # Перенос файлов если они в корне
            [ -f "server.js" ] && cp server.js backend/
            [ -f "api.js" ] && cp api.js backend/src/
            [ -f "main.js" ] && cp main.js backend/src/
            
            echo "Created backend directory with basic structure"
          fi
          
          # Проверяем frontend
          if [ -d "frontend" ]; then
            echo "Frontend directory exists in repository"
            ls -la frontend
          else
            echo "WARNING: Frontend directory missing in repository"
          fi
          
          chmod -R u+rw "$GITHUB_WORKSPACE"
          cp -R "$GITHUB_WORKSPACE" /tmp/workdir
          
          # Создаем архив
          tar --warning=no-file-changed --warning=no-file-removed --ignore-failed-read -czf app.tar.gz \
            --exclude=.git \
            --exclude=.github \
            --exclude=*.log \
            --exclude=*.tmp \
            --exclude=node_modules \
            --exclude=frontend/node_modules \
            --exclude=frontend/dist \
            --exclude=backend/node_modules \
            --exclude=.idea \
            -C /tmp/workdir .
          
          if [ ! -f app.tar.gz ]; then
            echo "Error: Archive file was not created. Exiting."
            exit 1
          fi
          
          echo "Archive created successfully, size: $(du -h app.tar.gz | cut -f1)"
          
          # Отправка архива на сервер
          scp -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no -P ${{ secrets.ORANGE_PI_PORT }} \
            app.tar.gz \
            ${{ secrets.ORANGE_PI_USER }}@${{ secrets.ORANGE_PI_IP }}:/tmp/app-$TIMESTAMP.tar.gz
          
          # Сохраняем метку времени для следующего шага
          echo "DEPLOY_TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV

      - name: Deploy in Docker on remote server
        run: |
          set -e
          set -x
          # Используем метку времени из предыдущего шага
          TIMESTAMP="${{ env.DEPLOY_TIMESTAMP }}"
          
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no -p ${{ secrets.ORANGE_PI_PORT }} \
            ${{ secrets.ORANGE_PI_USER }}@${{ secrets.ORANGE_PI_IP }} << EOF
            set -e
            set -x
            
            # Проверяем текущее состояние Docker
            echo "Current Docker containers:"
            docker ps -a
            
            # Принудительно останавливаем и удаляем контейнер
            echo "Stopping and removing containers..."
            docker stop fhir_app 2>/dev/null || echo "Container fhir_app was not running"
            docker rm fhir_app 2>/dev/null || echo "Container fhir_app did not exist"
            docker stop node_app 2>/dev/null || echo "Container node_app was not running"
            docker rm node_app 2>/dev/null || echo "Container node_app did not exist"
            
            # Проверка образа
            echo "Current images before build:"
            docker images | grep fhir-app || echo "No fhir-app image found"
            
            # Распаковка с новой меткой времени
            echo "Unpacking archive with timestamp $TIMESTAMP"
            rm -rf ~/fhir-app-$TIMESTAMP && mkdir -p ~/fhir-app-$TIMESTAMP
            tar xzf /tmp/app-$TIMESTAMP.tar.gz -C ~/fhir-app-$TIMESTAMP
            
            # Симлинк на актуальную версию
            rm -rf ~/fhir-app
            ln -sf ~/fhir-app-$TIMESTAMP ~/fhir-app
            
            cd ~/fhir-app
            echo "Contents of deployment directory:"
            ls -la
            
            # Проверка структуры проекта
            if [ ! -d "backend" ]; then
              echo "ERROR: Backend directory still missing! Creating minimal backend..."
              mkdir -p backend/src
              # Копирование файлов из корня в backend если они существуют
              [ -f "server.js" ] && cp server.js backend/
              [ -f "api.js" ] && cp api.js backend/src/
              [ -f "main.js" ] && cp main.js backend/src/
              
              # Создаем минимальный package.json для backend
              if [ ! -f "backend/package.json" ]; then
                echo '{"name":"fhir-app-backend","version":"1.0.0","main":"server.js","scripts":{"start":"node server.js"},"dependencies":{"express":"^5.1.0","cors":"^2.8.5","undici":"^7.8.0"}}' > backend/package.json
              fi
            fi
            
            # Создаем Dockerfile
            echo "Creating Dockerfile with timestamp $TIMESTAMP"
            cat > Dockerfile << DOCKEREOF
            FROM node:20-alpine
            
            WORKDIR /app
            
            # Label for version tracking
            LABEL build_timestamp="$TIMESTAMP"
            
            # Install backend dependencies
            COPY backend/package*.json ./
            RUN npm install --production
            
            # Copy backend code
            COPY backend/ ./
            
            # Create directory for frontend
            RUN mkdir -p frontend/dist
            
            # Copy frontend build if exists
            COPY frontend/dist/ ./frontend/dist/ 2>/dev/null || echo "No frontend/dist found"
            
            # Environment variables
            ENV NODE_ENV=production
            ENV EXTERNAL_FHIR_URL='https://server.fire.ly/r4'
            
            # Expose port
            EXPOSE 3000
            
            # Start command
            CMD ["node", "server.js"]
            DOCKEREOF
            
            # Показываем созданный Dockerfile
            echo "Dockerfile contents:"
            cat Dockerfile
            
            # Сборка с принудительной пересборкой (--no-cache)
            echo "Building Docker image with --no-cache..."
            docker build --no-cache -t fhir-app:latest .
            
            echo "Current images after build:"
            docker images | grep fhir-app
            
            # Запуск контейнера
            echo "Running new container..."
            docker run -d --name fhir_app \
              -p 80:3000 \
              -e NODE_ENV=production \
              -e EXTERNAL_FHIR_URL='https://server.fire.ly/r4' \
              --restart unless-stopped \
              fhir-app:latest
            
            # Проверка статуса
            echo "New container status:"
            docker ps -a | grep fhir
            
            # Вывод логов
            sleep 5
            echo "Container logs:"
            docker logs fhir_app
            
            # Очистка
            echo "Cleaning up old archives..."
            rm -f /tmp/app-$TIMESTAMP.tar.gz
            
            # Проверка доступности приложения
            echo "Checking application availability:"
            curl -s -I http://localhost:80/ || echo "Application not responding to HTTP requests!"
          EOF

      - name: Verify deployment
        run: |
          set -e
          echo "Waiting for deployment to stabilize..."
          sleep 10
          
          echo "Checking container status on server..."
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no -p ${{ secrets.ORANGE_PI_PORT }} \
            ${{ secrets.ORANGE_PI_USER }}@${{ secrets.ORANGE_PI_IP }} << 'EOF'
            set -e
            echo "Container status:"
            docker ps | grep fhir || echo "ERROR: fhir container not found!"
            
            echo "Container logs (last 50 lines):"
            docker logs fhir_app --tail 50 || echo "ERROR: Cannot get logs!"
            
            echo "Checking server response:"
            curl -s -I http://localhost:80/ || echo "WARNING: Application not responding to HTTP requests!"
          EOF
